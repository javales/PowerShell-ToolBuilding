# Exercise 1: Getting acquainted
Windows PowerShell provides debugging to help you identify the cause of issues during runtime of your code. This can be extremely helpful when you are running code in production and need to resolve issues quickly. In this exercise, you will get aquatinted with the commands that PowerShell provide to initiate debugging.

Objectives
After completing this lab, you will be able to:

Control Write-Verbose and Write-Debug output.
List, set and remove breakpoints using the PSBreakpoint commands

# Task 1.1: Controlling the Debug and Verbose streams

## Execute the following command from the console pane:

Get-Command -Verb Write -Module Microsoft.PowerShell.Utility

This will provide a list of Write commands from the Microsoft.PowerShell.Utility module. Note the Write-Debug and Write-Verbose command.


## Execute the following commands from the console pane:

Write-Debug -Message 'Debug message'

Write-Verbose -Message 'Verbose message'

Notice that you do not see any messages displayed. You can use the common switch parameters -Debug and -Verbose for the Write-Debug and Write-Verbose commands respectively. Using these switch parameters will cause the messages to be additionally written to the console (i.e. Output stream). By default the commands will write to the debug and verbose streams respectively and are therefore not seen. Execute the following commands from the console pane (answer with Yes if asked):

Write-Debug -Message 'Debug message' -Debug

Write-Verbose -Message 'Verbose message' -Verbose

### OUTPUT:
PS C:\WINDOWS\system32> Write-Debug -Message 'Debug message'

PS C:\WINDOWS\system32> Write-Verbose -Message 'Verbose message'

PS C:\WINDOWS\system32> Write-Debug -Message 'Debug message' -Debug
DEBUG: Debug message

PS C:\WINDOWS\system32> Write-Verbose -Message 'Verbose message' -Verbose
VERBOSE: Verbose message


## Notice that the messages are now displayed. Another way to achieve this, is by altering preference variables that change the behavior in the scope in which they were set. Take a look at these preference variable values. Execute the following commands from the console pane:

$DebugPreference

$VerbosePreference

Look at the type of object that the preference variables are assigned to using Get-Member.

$DebugPreference | Get-Member

Notice that it is a [System.Management.Automation.ActionPreference] object which happens to be an enumerator. Look at the possible string (i.e. Name) values that can be assigned to it.

[Enum]::GetNames([System.Management.Automation.ActionPreference])

Both are set to SilentlyContinue which causes the messages to be not be shown on the console. They messages are however still written to the Debug and Verbose streams. Alter the value of these preference variables by executing the following commands from the console pane:

$DebugPreference = 'Continue'

$VerbosePreference = 'Continue'

Now execute the following commands from the console pane and note the output:

Write-Debug -Message 'Debug message'

Write-Verbose -Message 'Verbose message'

The setting of the preference variables will affect the stream output in the scope of where it was made. If set within a function it will only affect Write-xxx commands called withing that function or functions called by it.

The messages get displayed without the use of the -Debug and -Verbose parameters. Go back to the original situation by executing these commands from the console pane:

$DebugPreference = 'SilentlyContinue'

$VerbosePreference = 'SilentlyContinue'

There is a a difference in behavior for the Write-Debug as setting the preference variable to 'Continue' will not cause a prompt to appear at each call to Write-Debug


# Task 1.2: Working with the PSBreakpoint commands
Breakpoints allow script execution to be suspended based on certain criteria. They are used for controlling where and why to suspend code execution so that the state of the execution environment can be inspected. When a breakpoint is triggered and the code is suspended an interactive prompt is presented allowing for inspection of thing like variable values, etc.

## Execute the following command from the console pane to get a list of the PSBreakpoint commands:

Get-Command -Noun PSBreakpoint

All of these can be called through the debug menu in PowerShell ISE as well. The calls via the menu however use default arguments and do not give you the same control as you would have if explicitly calling the commands and passing in arguments.

## Try a simple debugging sessions to start with. Execute the following commands from the console pane:

Set-PSBreakpoint -Variable TestVariable -Mode Read

$TestVariable = "Let's debug!"

As you noticed breakpoint has not been triggered yet. When setting the breakpoint in the previous step the condition was to break when the variable TestVariable was being read (i.e. Mode). We only wrote to the variable through the value assignment so far. Execute the following command from the console pane:

Write-Output $TestVariable

Notice that the breakpoint condition was met and that the execution was suspended. An indication of this is the prompt changing to '>>' signaling a request for input. You are now actually debugging. Enter the following at the prompt to get help:

# Exercise 2: Strict mode and debug output
Windows PowerShell provides a Set-Strictmode cmdlet. Use this to detect many common scripting errors such as uninitialized variables, null references as well as attempts to access non-existing object members (i.e. typically happens due to typo's in code).

In this exercise you will explore this cmdlet, together with cmdlets for displaying debug information to the console.

Objectives
After completing this lab, you will be able to:

Use the Set-StrictMode cmdlet to detect common scripting errors
Use the Write-Debug and Write-Verbose cmdlets to display runtime output
Use the Set-PSDebug cmdlet to enable detailed script tracing


## Get-Command -Name *Strict*

PS C:\WINDOWS\system32> Set-StrictMode -Version Latest
 
PS C:\WINDOWS\system32> Get-Help Set-StrictMode -Parameter Version

## Turn off Strict Mode
Get-Help Set-StrictMode -ShowWindow
Set-StrictMode -Off


# Task 2.2: The Write-Debug and Write-Verbose Cmdlets
When debugging, it is often useful to write things out to the console. Two ways this can help include:

Writing variable values out when you suspect the value might be altered unexpectedly
Leaving 'mile markers' in your code to see what has or is being executed. This is especially useful if your code seems to hang or be unresponsive. Maybe it is getting stuck in an infinite loop somewhere.
Two useful command for accomplishing the above tasks are write-debug and write verbose because their output can be controlled at runtime without actually having to remove the lines later.

## Two preference variables can be set to cause debug and verbose writes to appear on the output stream (i.e. console). In the shell pane, adjust the settings to show the output.
Get-Help about_preference_variables -ShowWindow
$DebugPreference = 'Continue'; $VerbosePreference = 'Continue'

## Before you forget, revert back to the original "SilentlyContinue" setting for the $DebugPreference and $VerbosePreference variables.
$DebugPreference = 'SilentlyContinue'; $VerbosePreference = 'SilentlyContinue'


## You are going to use common parameters to display debug and verbose information instead of altering the preference variables. Run Get-PowerShellVersion once with the correct parameter for enabling debug output and once with the correct parameter for enabling verbose output.

PS C:\WINDOWS\system32> Get-PowerShellVersion
WIN10 has the following PowerShell version(s) installed: 2.0, 5.1.18362.1

PS C:\WINDOWS\system32> Get-PowerShellVersion -Debug
WIN10 has the following PowerShell version(s) installed: 2.0, 5.1.18362.1

PS C:\WINDOWS\system32> Get-PowerShellVersion -Verbose
WIN10 has the following PowerShell version(s) installed: 2.0, 5.1.18362.1

PS C:\WINDOWS\system32> C:\PShell\Labs\GetPSVersionInfo.ps1

PS C:\WINDOWS\system32> Get-PowerShellVersion -Debug
DEBUG: Base key = LocalMachine on node WIN10
DEBUG: ...SOFTWARE\Microsoft\PowerShell
DEBUG: ......SOFTWARE\Microsoft\PowerShell\1\PowerShellEngine
DEBUG: ......SOFTWARE\Microsoft\PowerShell\3\PowerShellEngine
WIN10 has the following PowerShell version(s) installed: 2.0, 5.1.18362.1

PS C:\WINDOWS\system32> Get-PowerShellVersion -Verbose
VERBOSE: Opening the (remote) base key
VERBOSE: ...opening subkey
VERBOSE: ......opening engine key
VERBOSE: ......opening engine key
WIN10 has the following PowerShell version(s) installed: 2.0, 5.1.18362.1

PS C:\WINDOWS\system32>  


# Task 2.3: Using the Set-PSDebug Cmdlet
Trace data allows you to see the chronological execution of code lines. This means that when you're calling functions and loops you can see what is actually happening and what order they are being called. As you can imagine, trace data can be quite long, but when stuck on a problem it is another useful debugging tool to know about. You'll learn a little more about trace data at the end of this lab as well.

Begin by opening Windows PowerShell ISE by right clicking on the PowerShell icon and selecting "Run ISE as an Administrator", or by clicking Run ISE as Administrator..

NOTE: It might take a moment to start ISE

Within the Windows PowerShell ISE, open the file C:\PShell\Labs\GetPSVersionInfo2.ps1. Examine the code in the Script Pane and note the use of Write-Verbose and Write-Debug statements. Run the script to load the Get-PowerShellVersion. Run the following command from the console pane:

Get-PowerShellVersion

Now, turn on the first level of tracing by executing the following command from the console pane.

Set-PSDebug -Trace 1

Level 1 tracing will just show the lines of code as they run, but you can have more robust tracing as well. Run the command from the console pane again while taking note of the tracing produced:

Get-PowerShellVersion

Increase the trace level by running the command from the console pane:

Set-PSDebug -Trace 2

Level 2 tracing adds on trace info for any function calls and variable assignments as well. Run the command from the console pane again while taking note of the additional tracing produced:

Get-PowerShellVersion

Disable tracing and verify it is disabled by running the function from the console pane again while noticing that it traces the cmdlet that disables it as well:

Set-PSDebug -Trace 0

Get-PowerShellVersion


# Exercise 3: The Windows PowerShell debugger
Windows PowerShell provides an interactive debugger for use within both the ISE and the PowerShell console. Explore the mechanisms for initiating and using the debugger.

Objectives
After completing this lab, you will be able to:

Use the ISE debugger
Use the Set-PSBreakPoint cmdlet
Debug Windows PowerShell Workflows
Use the Trace-Command cmdlet


# Task 3.2: The Set-PSBreakpoint Cmdlet
While the ISE gives you a convenient way to set line breakpoints, it doesn't give other options. Set-PSBreakpoint, however, provides many different options.

